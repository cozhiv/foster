generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  password      String
  emailVerified DateTime?
  sessions      Session[]
  accounts      Account[]
  lists         UserList[]
  sales         Sale[]
  sums          UserSum[]
  pictures      UserPic[]
  verified      Boolean?
  resetPassTokens ResetPassToken[]
}

model ResetPassToken {
  token     String   @id
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expires   DateTime
}


model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  user              User     @relation(fields: [userId], references: [id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}


model Item {
  id     String   @id @default(cuid())
  name   String
  price  Float
  status String
  listId String
  list   List     @relation(fields: [listId], references: [id])
  count  Int
}

model Sale {
  id         String   @id @default(cuid())
  userEmail  String
  user       User     @relation(fields: [userEmail], references: [email])
  name       String
  price      Float
  listId     String
  list       List     @relation(fields: [listId], references: [id])
  status     String
  count      Int
}

model List {
  id       String   @id @default(cuid())
  name     String
  status   String
  budget   Float
  users    UserList[]
  items    Item[]
  sales    Sale[]
  
}

model UserList {
  userId String
  user   User @relation(fields: [userId], references: [id])
  
  listId String
  list   List @relation(fields: [listId], references: [id])
  

  role String @default("member")

  @@id([userId, listId])
}


model UserSum {
  userId String
  user   User @relation(fields: [userId], references: [id])
  
  sumId String
  sum   Sum @relation(fields: [sumId], references: [id])
  

  role String @default("member")

  @@id([userId, sumId])
}

model Sum {
  id       String   @id @default(cuid())
  name     String?
  value    Float
  default  Float?
  status   String?
  users    UserSum[]
}


model Picture {
  id       String   @id @default(cuid())
  title    String?
  label    String?
  link     String?
  path     String?
  status   String?
  type     String?
  users    UserPic[]
}

model UserPic {
  userId      String
  user        User @relation(fields: [userId], references: [id])
  
  pictureId   String
  picture     Picture @relation(fields: [pictureId], references: [id])

  @@id([userId, pictureId])
}
